#!/usr/bin/env python3

# SPDX-FileCopyrightText: 2010, 2011, 2012, 2013, 2017, 2018, 2022 Michael Pyne <mpyne@kde.org>
# SPDX-FileCopyrightText: 2023 - 2024 Andrew Shark <ashark@linuxcomp.ru>
#
# SPDX-License-Identifier: GPL-2.0-or-later

import argparse
import logging.config
import os
import sys
import traceback

from kde_builder_lib.kb_exception import ProgramError
from kde_builder_lib.kb_exception import UnknownKdeProjectException
from kde_builder_lib.debug import KBLogger
from kde_builder_lib.util.textwrap_mod import textwrap

RealBinDir = os.path.dirname(os.path.realpath(__file__))


# <editor-fold desc="Check missing python modules">
def find_missing_modules() -> list[str]:
    required_modules = [
        "yaml",
        "setproctitle",
    ]
    missing_modules = []

    def validate_mod(mod_name):
        import importlib

        try:
            importlib.import_module(mod_name)
            return True
        except ImportError:
            return False

    for needed_module in required_modules:
        if validate_mod(needed_module):
            continue
        missing_modules.append(needed_module)

    return missing_modules


# Ensure that required Python modules are available so that the user isn't surprised later with an exception
missing_module_descriptions = find_missing_modules()
if missing_module_descriptions:
    print(textwrap.dedent("""\
        Some mandatory Python modules are missing, and kde-builder cannot operate without them. Please ensure these modules are installed:"""))
    for missing_module_desc in missing_module_descriptions:
        print("\t" + missing_module_desc)

    print("\nKDE Builder can do this for you on many distros. Consult the installation process in project documentation at https://kde-builder.kde.org\n"
          "Ensure you have successfully executed this script:\n"
          f"\t{RealBinDir}/scripts/initial_setup.sh")
    exit(1)
# </editor-fold>

# ---

import setproctitle  # noqa: E402
setproctitle.setproctitle("kde-builder main: " + " ".join(sys.argv))

parser = argparse.ArgumentParser(prog="ProgramName",
                                 description="What the program does",
                                 epilog="Text at the bottom of help",
                                 add_help=False)
parser.add_argument("--initial-setup", action="store_true")
parser.add_argument("--install-distro-packages", action="store_true")
parser.add_argument("--generate-config", action="store_true")
parser.add_argument("--prompt-answer",  nargs=1)
parser.add_argument("--debug", action="store_true")
parser.add_argument("--log-level", type=lambda x: x.split("=", 2), action="append")  # allowing repeating several times

args, unknown = parser.parse_known_args()

# ---

import yaml  # noqa: E402

# <editor-fold desc="Applying loggers configuration">
with open(f"{RealBinDir}/data/kde-builder-logging.yaml", "r") as f:
    config = yaml.safe_load(f.read())

override_config = {}
if os.path.exists(os.getcwd() + "/kde-builder-logging.yaml"):
    with open(os.getcwd() + "/kde-builder-logging.yaml", "r") as f:
        override_config = yaml.safe_load(f.read())
elif os.path.exists(os.path.expanduser("~/.config/kde-builder-logging.yaml")):
    with open(os.path.expanduser("~/.config/kde-builder-logging.yaml"), "r") as f:
        override_config = yaml.safe_load(f.read())

# Overriding logger levels by cmdline
if args.log_level:
    if override_config.get("loggers", None) is None:
        override_config["loggers"] = {}
    for logger_name, level_name in args.log_level:
        if override_config["loggers"].get(logger_name, None) is None:
            override_config["loggers"][logger_name] = {}
        override_config["loggers"][logger_name]["level"] = level_name

    # remove them, so we can pass sys.argv to Application
    indices_to_remove = []
    for i, arg in enumerate(sys.argv):
        if i in indices_to_remove:
            continue  # prevent analyzing the value of log-level argument (as users may try to do something like `kde-builder --log-level --log-level`)

        if arg == "--log-level":
            indices_to_remove.append(i)
            indices_to_remove.append(i + 1)
        elif arg.startswith("--log-level="):
            indices_to_remove.append(i)
    for i in reversed(indices_to_remove):
        sys.argv.pop(i)


# Merges dict "b" into dict "a", overwriting existing entries. Mutates dict "a". Also, returns "a".
def merge_dicts(a: dict, b: dict, path=None):
    if path is None:
        path = []

    for key in b:
        if key in a:
            if isinstance(a[key], dict) and isinstance(b[key], dict):
                merge_dicts(a[key], b[key], path + [str(key)])
            elif a[key] != b[key]:
                a[key] = b[key]
        else:
            a[key] = b[key]
    return a


config = merge_dicts(config, override_config)
logging.config.dictConfig(config)  # this will create standard Logger loggers and their handlers with their formatters will be set up

# Now will create our KBLogger loggers, set up their levels and handlers
for logger_name, logger_config in config.get("loggers", {}).items():
    level = logger_config.get("level", logging.NOTSET)  # get level from the config
    handlers = logging.getLogger(logger_name).handlers  # get the object handlers that were set for standard logger (their formatters are already set)

    kblogger = KBLogger.getLogger(logger_name, level)  # instantiating our kblogger, and its level becomes set
    for handler in handlers:
        kblogger.addHandler(handler)

if args.debug:
    # setting all loggers to logging.DEBUG level
    for logger_name, _ in config.get("loggers", {}).items():
        kblogger = KBLogger.getLogger(logger_name)
        kblogger.setLevel(logging.DEBUG)
    sys.argv.remove("--debug")  # remove it, so we can pass sys.argv to Application
# </editor-fold>

# ---

setup_steps = []
if args.initial_setup:
    setup_steps = ["install-distro-packages", "generate-config"]
else:
    if args.install_distro_packages:
        setup_steps.append("install-distro-packages")
    if args.generate_config:
        setup_steps.append("generate-config")

if setup_steps:
    from kde_builder_lib.first_run import FirstRun
    from kde_builder_lib.debug import Debug

    d = Debug()
    d.set_colorful_output(True)
    prompt_answer = args.prompt_answer[0] if args.prompt_answer is not None else None
    fr = FirstRun(prompt_answer)
    exit(fr.setup_user_system(RealBinDir, setup_steps))

from kde_builder_lib.version import Version  # noqa: E402
from kde_builder_lib.application import Application  # noqa: E402
from kde_builder_lib.kb_exception import KBException  # noqa: E402

# Script starts.

app = None
try:
    app = Application(sys.argv[1:])  # the 0 element is script name
    result = app.run_all_module_phases()
    app.finish(result)
except UnknownKdeProjectException as err:
    logger_app = KBLogger.getLogger("application")
    logger_app.error(f" r[*] y[{err.unknown_project_name}] is not found in KDE projects, and there is no defined project with such name in the config.")
    exit(99)
except ProgramError as err:
    print(textwrap.dedent(f"""
    kde-builder encountered an exceptional error condition:
    ========
    {err}
    ========
    Can't continue, so stopping now.

    """))

    print("Please submit a bug against kde-builder on https://invent.kde.org/sdk/kde-builder/-/issues")

    traceback.print_exc()
    if app:
        app.finish(99)  # noreturn
    exit(99)  # if app couldn't be created

except KBException as err:
    logger_app = KBLogger.getLogger("application")
    logger_app.error(str(err))
    if app:
        app.finish(99)  # noreturn
    exit(99)  # if app couldn't be created

except Exception as err:
    # We encountered some other kind of error that didn't raise a `KBException`
    print(textwrap.dedent(f"""\
    Encountered an error in the execution of the script.
    --> {err}
    Please submit a bug against kde-builder on https://invent.kde.org/sdk/kde-builder/-/issues
    """))

    traceback.print_exc()
    if app:
        app.finish(99)  # noreturn
    exit(99)  # if app couldn't be created
